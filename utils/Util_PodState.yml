##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: util_PodState.yml
##   
##   Purpose: 
##   Change the state of all virtual machines in a Pod. 
##
##   Example: Initiate a graceful shutdown of Pod 220's virtual machines 
##   ansible-playbook -e "@/home/ubuntu/Pod-220-Config.yml" utils/util_PodState.yml --extra-vars "state=shutdownguest"
##
##   Valid options for state are: "poweredon", "poweredoff", "rebootguest", "restarted", "shutdownguest", "suspended", and "absent" (deletes VMs)
##
---
- hosts: localhost
  name: util_PodState.yml
  tasks:
    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" UnDeploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}

                                   Nested_Router.Name: {{ Nested_Router.Name }}
                                   Nested_vRLI.VMName: {{ Nested_vRLI.VMName }}
                                Nested_vCenter.VMName: {{ Nested_vCenter.VMName }}
            Nested_NSXT.Component.LocalManager.VMName: {{ Nested_NSXT.Component.LocalManager.VMName }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables

    - name: Gather info about virtual machines in the nested vSphere environment
      community.vmware.vmware_vm_info:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
      register: vminfo
      ignore_errors: true

    - name: Change state of VMs in the nested vSphere environment
      community.vmware.vmware_guest:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        name: "{{ item.guest_name }}"
        state: "{{ state }}"
      loop: "{{ vminfo.virtual_machines }}"
      ignore_errors: true

    - name: Change state of vRLI VM
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        name: "{{ Nested_vRLI.VMName }}"
        state: "{{ state }}"
      ignore_errors: true

    - name: Change state of ESXi VMs
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        name: "{{ item.value.VMName }}"
        state: "{{ state }}"
      async: 7200
      poll: 0
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      ignore_errors: true

    - name: Change state of vCenter VM
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        name: "{{ Nested_vCenter.VMName }}"
        state: "{{ state }}"
      ignore_errors: true

    - name: Change state of NSX Manager VM(s)
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        name: "{{ Nested_NSXT.Component.LocalManager.VMName }}"
        state: "{{ state }}"
      ignore_errors: true

    - name: Change state of VyOS router VM
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        name: "{{ Nested_Router.Name }}"
        state: "{{ state }}"
      ignore_errors: true