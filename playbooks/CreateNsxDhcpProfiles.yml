##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/CreateNsxDhcpProfiles.yml
##
---
- name: CreateNsxDhcpProfiles.yml
  hosts: localhost
  tasks:
    - name: CreateNsxDhcpProfiles_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                             Ansible Playbook: {{ ansible_play_name }}

                                            Target.Deployment: {{ Target.Deployment }}

                  Nested_NSXT.Component.LocalManager_VIP.FQDN: {{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}

                                      Number of DHCP Profiles: {{ Nested_NSXT.Networking.DHCPProfiles | length }}
                          Nested_NSXT.Networking.DHCPProfiles: {{ Nested_NSXT.Networking.DHCPProfiles }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables

##
## For each Edge Cluster, we need it's path for the DHCP Server REST API call.  Thus, let's create a edgeclusterpath dictionary with Key being
## the EdgeCluster Name, and the Value being the given Edge Clusters path.
##
    - name: Obtain list of all Edge Clusters
      vmware.ansible_for_nsxt.nsxt_edge_clusters_facts:
        hostname: "{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}"
        username: "{{ Nested_NSXT.Credential.admin.Name }}"
        password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
      register: edgeclusters
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display edgeclusters Variable ==================================

          edgeclusters:
            {{ edgeclusters | to_nice_yaml(indent=2, width=99999) | indent(2) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Create edgeclusterpath dictionary
      ansible.builtin.set_fact:
        edgeclusterpath: "{{ edgeclusterpath | default({}) | combine({item.display_name: pathtoedgecluster}) }}"
      vars:
        pathtoedgecluster: "/infra/sites/default/enforcement-points/default/edge-clusters/{{ item.id }}"
      loop: "{{ edgeclusters.results }}"
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ============================= Display edgeclusterpath Dictionary  ===============================

          edgeclusterpath:
            {{ edgeclusterpath | to_nice_yaml(indent=2, width=99999) | indent(2) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Read DHCP Profiles structure from template into a variable
      ansible.builtin.set_fact:
        var_dhcpprofiles: "{{ lookup('template', Target.TemplateFolder + '/vars_NSXT_DHCPProfiles.j2') | from_yaml }}"

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display var_dhcpprofiles Variable ===================================

          var_dhcpprofiles:
            {{ var_dhcpprofiles | to_nice_yaml(indent=2, width=99999) | indent(2) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.NSXT.LocalManager.Deploy


##
## Create all DHCP Profiles
##
    - name: Create NSX-T DHCP Server Profiles
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/policy/api/v1/infra/dhcp-server-configs/{{ item.display_name }}
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 20
        force_basic_auth: true
        method: PATCH
        body_format: json
        return_content: true
        status_code: 200
        body: "{{ item }}"
      register: result
      loop: "{{ var_dhcpprofiles | default([]) }}"
      until: result.status == 200
      retries: 5
      delay: 30
      when:
        - item.resource_type == "DhcpServerConfig"
        - Deploy.Product.NSXT.LocalManager.Deploy

    - name: Create NSX-T DHCP Relay Profiles
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/policy/api/v1/infra/dhcp-relay-configs/{{ item.display_name }}
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 20
        force_basic_auth: true
        method: PUT
        body_format: json
        return_content: true
        status_code: 200
        body: "{{ item }}"
      register: result
      loop: "{{ var_dhcpprofiles | default([]) }}"
      until: result.status == 200
      retries: 5
      delay: 30
      when:
        - item.resource_type == "DhcpRelayConfig"
        - Deploy.Product.NSXT.LocalManager.Deploy
