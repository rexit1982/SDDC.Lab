##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/ConfigureNsxBackup.yml
##
##   Comments: This Ansible Playbook:
##               1) Configures a DISABLED backup job on the NSX-T Global Manager (If GlobalManager.SiteCode == SiteCode)
##               2) Configures a ENABLED backup job on the NSX-T Local Manager
##               3) Performs a backup of the NSX-T Local Manager if Federation is configured (Needed to On-Board a site into NSX-T Federation)
##
---
- hosts: localhost
  name: ConfigureNsxBackup.yml
  tasks:
    - name: ConfigureNsxBackup_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                     Ansible Playbook: {{ ansible_play_name }}

                                             SiteCode: {{ SiteCode }}

                        NSX-T Global Manager SiteCode: {{ Deploy.Product.NSXT.GlobalManager.SiteCode }}

                         NSX-T Local Manager VIP FQDN: {{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}

                         NSX-T Local Manager Username: {{ Nested_NSXT.Credential.admin.Name }}
                         NSX-T Local Manager Password: {{ Nested_NSXT.Credential.admin.Password }}

                               Backup Server Protocol: {{ Nested_NSXT.Backup.Protocol }}
                                   Backup Server User: {{ Nested_NSXT.Backup.Credential.User }}
                                   Backup Server Port: {{ BackupServer[Nested_NSXT.Backup.Protocol].Port }}
                                   Backup Server FQDN: {{ BackupServer[Nested_NSXT.Backup.Protocol].FQDN }}
                                   Backup Server Path: {{ BackupServer[Nested_NSXT.Backup.Protocol].Path }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables

##
## Configure Backup on NSX-T Local Manager
##

    - name: Retrieve SSH Fingerprint for SFTP backup server [Local Manager]
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/policy/api/v1/cluster/backups?action=retrieve_ssh_fingerprint
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        force_basic_auth: true
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        method: POST
        body_format: json
        headers:
          Accept: application/json
        body: >
          {
            "server":"{{ BackupServer[Nested_NSXT.Backup.Protocol].FQDN }}",
            "port":{{ BackupServer[Nested_NSXT.Backup.Protocol].Port }}
          }
        timeout: 5
      register: result
      ignore_errors: true
      when: Deploy.Product.NSXT.LocalManager.Deploy

    - name: Store SSH Fingerprint of SFTP Server [Local Manager]
      ansible.builtin.set_fact:
        ssh_fingerprint: "{{ result.json.ssh_fingerprint | default(None) }}"

    - name: DEBUG -- Display SSH Fingerprint of SFTP Server [Local Manager] (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ======================== Display SSH Fingerprint [Local Manager] ==========================

             ssh_fingerprint: {{ ssh_fingerprint }}

          ===========================================================================================
      when:
        - DEBUG.DisplayVariables

    - name: Configure Disabled Weekly NSX-T Backup Job [Local Manager]
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/cluster/backups/config
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        force_basic_auth: true
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        method: PUT
        body_format: json
        headers:
          Accept: application/json
        body: >
          {
            "backup_enabled" : false,
            "backup_schedule": {
                "resource_type": "WeeklyBackupSchedule",
                "days_of_week":[ 0 ],
                "hour_of_day": 0,
                "minute_of_day": 0
            },
            "remote_file_server": {
                "server": "{{ BackupServer[Nested_NSXT.Backup.Protocol].FQDN }}",
                "port": {{ BackupServer[Nested_NSXT.Backup.Protocol].Port }},
                "protocol": {
                  "protocol_name": "{{  Nested_NSXT.Backup.Protocol|lower  }}",
                  "ssh_fingerprint": "{{ ssh_fingerprint }}",
                  "authentication_scheme": {
                      "scheme_name": "PASSWORD",
                      "username": "{{ Nested_NSXT.Backup.Credential.User }}",
                      "password": "{{ Nested_NSXT.Backup.Credential.Password }}"
                  }
                },
                "directory_path": "{{ BackupServer[Nested_NSXT.Backup.Protocol].Path }}"
            },
            "passphrase": "{{ Nested_NSXT.Backup.Credential.Passphrase }}",
            "inventory_summary_interval": 300
          }
        timeout: 5
      register: result
      ignore_errors: true
      when: Deploy.Product.NSXT.LocalManager.Deploy


##
## Configure Backup on NSX-T Global Manager if the Global Manager SiteCode matches our SiteCode (==We are deploying the Global Manager)
##
    - name: Retrieve SSH Fingerprint for SFTP backup server [Global Manager]
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.GlobalManager_VIP.FQDN }}/global-manager/api/v1/cluster/backups?action=retrieve_ssh_fingerprint
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        force_basic_auth: true
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        method: POST
        body_format: json
        headers:
          Accept: application/json
        body: >
          {
            "server": "{{ BackupServer[Nested_NSXT.Backup.Protocol].FQDN }}",
            "port": {{ BackupServer[Nested_NSXT.Backup.Protocol].Port }}
          }
        timeout: 5
      register: result
      ignore_errors: true
      when:
        - Deploy.Product.NSXT.Federation.Deploy
        - Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode

    - name: Store SSH Fingerprint of SFTP Server [Global Manager]
      ansible.builtin.set_fact:
        ssh_fingerprint: "{{ result.json.ssh_fingerprint | default(None) }}"
      when:
        - Deploy.Product.NSXT.Federation.Deploy
        - Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode

    - name: DEBUG -- Display SSH Fingerprint of SFTP Server [Global Manager] (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ======================== Display SSH Fingerprint [Global Manager] ==========================

             ssh_fingerprint: {{ ssh_fingerprint }}

          ===========================================================================================
      when:
        - Deploy.Product.NSXT.Federation.Deploy
        - Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode
        - DEBUG.DisplayVariables

    - name: Configure Disabled Weekly NSX-T Backup Job [Global Manager]
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.GlobalManager_VIP.FQDN }}/global-manager/api/v1/cluster/backups/config
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        force_basic_auth: true
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        method: PUT
        body_format: json
        headers:
          Accept: application/json
        body: >
          {
            "backup_enabled" : false,
            "backup_schedule": {
                "resource_type": "WeeklyBackupSchedule",
                "days_of_week":[ 0 ],
                "hour_of_day": 0,
                "minute_of_day": 0
            },
            "remote_file_server": {
                "server": "{{ BackupServer[Nested_NSXT.Backup.Protocol].FQDN }}",
                "port": {{ BackupServer[Nested_NSXT.Backup.Protocol].Port }},
                "protocol": {
                  "protocol_name": "{{ Nested_NSXT.Backup.Protocol|lower }}",
                  "ssh_fingerprint": "{{ ssh_fingerprint }}",
                  "authentication_scheme": {
                      "scheme_name": "PASSWORD",
                      "username": "{{ Nested_NSXT.Backup.Credential.User }}",
                      "password": "{{ Nested_NSXT.Backup.Credential.Password }}"
                  }
                },
                "directory_path": "{{ BackupServer[Nested_NSXT.Backup.Protocol].Path }}"
            },
            "passphrase": "{{ Nested_NSXT.Backup.Credential.Passphrase }}",
            "inventory_summary_interval": 300
          }
        timeout: 5
      register: result
      ignore_errors: true
      when:
        - Deploy.Product.NSXT.Federation.Deploy
        - Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode


##
## Now that all Managers have their backups configured, perform a backup of the Local Manager, and wait for it to complete
##

    - name: Perform a backup of the NSX-T Local Manager if Federation is being configured [Local Manager]
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/cluster?action=backup_to_remote
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        force_basic_auth: true
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        method: POST
        body_format: json
        headers:
          Accept: application/json
        timeout: 5
      ignore_errors: true
      when:
        - Deploy.Product.NSXT.Federation.Deploy
        - Deploy.Product.NSXT.LocalManager.Deploy

    - name: Wait 10 seconds before start checking whether the NSX-T Local Manager backup has completed [Local Manager]
      ansible.builtin.pause: seconds=10
      when:
        - Deploy.Product.NSXT.Federation.Deploy
        - Deploy.Product.NSXT.LocalManager.Deploy

    - name: Wait for NSX-T Local Manager backup to complete [Local Manager]
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/cluster/backups/overview?show_backups_list=false
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        force_basic_auth: true
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        method: GET
        body_format: json
        headers:
          Accept: application/json
        timeout: 5
      ignore_errors: true
      register: result
      until: result.status == 200 and result.json.current_backup_operation_status.operation_type == "none"
      retries: 60
      delay: 30
      when:
        - Deploy.Product.NSXT.Federation.Deploy
        - Deploy.Product.NSXT.LocalManager.Deploy
