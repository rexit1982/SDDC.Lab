##
##      Project: SDDC.Lab
##      Authors: Luis Chanu & Rutger Blom
##     Filename: playbooks/CreateContentLibrary.yml
##
##  Description: This playbook supports the creating both local and subscribing (vCenter and URL) content libraries.
##               If a Datastore is not specified in the Pod config file, an Datastore is selected for you.  Given it
##               is assumed that NSX-T will deploy it's EdgeVMs in the Edge vSphere cluster, if multiple datastores
##               are avaialble, the Edge datastore is not chosen.
##
##               This playbook loops through the Content Libraries that need to be created, and creates them one-by-one,
##               by "sending" the object to the "include_tasks_CreateContentLibrary.yml" playbook.  That file includes
##               ALL of the tasks needed to provision the given content library, either 'local' or 'subscribed'.
##
---
- hosts: localhost
  name: CreateContentLibrary.yml
  tasks:
    - name: CreateContentLibrary_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                         Ansible Playbook: {{ ansible_play_name }}

                                        Target.Deployment: {{ Target.Deployment }}

                                              Target.FQDN: {{ Target.FQDN }}
                                              Target.User: {{ Target.User }}
                                          Target.Password: {{ Target.Password }}
                                           Target.Cluster: {{ Target.Cluster }}
                                        Target.DataCenter: {{ Target.DataCenter }}
                                         Target.Datastore: {{ Target.Datastore }}
                                          Target.VMFolder: {{ Target.VMFolder }}

                                      Nested vCenter FQDN: {{ Nested_vCenter.FQDN | lower }}
                                Nested vCenter DataCenter: {{ Nested_vCenter.DataCenter }}

               Number of Nested vCenter Content Libraries: {{ Nested_vCenter.ContentLibrary | dict2items | length }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables


##
## Create Non-TKG Content Libraries first to make sure they begin syncrhonizing before TKG.
## This ensures the Content Library is ready for when DeployWorkloadVms playbook is reached.
##
    - name: Create Non-TKG Content Libraries one at a time
      ansible.builtin.include_tasks:
        file: Include_Tasks_CreateContentLibrary.yml
      loop: "{{ Nested_vCenter.ContentLibrary | dict2items }}"
      when:
        - item.key != "TKG"
        - item.value.Enable
          # Target.Deployment == 'Host' and Subscribed.Type == 'vCenter' are mutually exclusive,
          # and can not both be set.
        - not ( Target.Deployment == "Host" and item.value.Type == "subscribed" and item.value.Subscribed.Type == "vCenter")

    - name: Create TKG Content Library
      ansible.builtin.include_tasks:
        file: Include_Tasks_CreateContentLibrary.yml
      loop: "{{ Nested_vCenter.ContentLibrary | dict2items }}"
      when:
        - item.key == "TKG"
        - item.value.Enable
          # Target.Deployment == 'Host' and Subscribed.Type == 'vCenter' are mutually exclusive,
          # and can not both be set.
        - not ( Target.Deployment == "Host" and item.value.Type == "subscribed" and item.value.Subscribed.Type == "vCenter")
