##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/CreateVds.yml
##
---
- hosts: localhost
  name: CreateVds.yml
  tasks:
    - name: CreateVds_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not number


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                      Ansible Playbook: {{ ansible_play_name }}

                                     Target.Deployment: {{ Target.Deployment }}

                                   Nested_vCenter.FQDN: {{ Nested_vCenter.FQDN }}
                                   Nested_vCenter.User: {{ Nested_vCenter.User }}
                               Nested_vCenter.Password: {{ Nested_vCenter.Password }}
                             Nested_vCenter.DataCenter: {{ Nested_vCenter.DataCenter }}

                                          vSwitch.Name: {{ Nested_vCenter.Networking.vSwitch.Name }}
                                    vSwitch.Config.MTU: {{ Nested_vCenter.Networking.vSwitch.Config.MTU }}
                        vSwitch.Config.NumberOfUplinks: {{ Nested_vCenter.Networking.vSwitch.Config.NumberOfUplinks }}
                            LinkDiscoveryProtocol.Type: {{ Nested_vCenter.Networking.vSwitch.Config.LinkDiscoveryProtocol.Type }}
                       LinkDiscoveryProtocol.Operation: {{ Nested_vCenter.Networking.vSwitch.Config.LinkDiscoveryProtocol.Operation }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables


    - name: Create distributed switch in the nested vCenter
      community.vmware.vmware_dvswitch:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        datacenter_name: "{{ Nested_vCenter.DataCenter }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        switch_name: "{{ Nested_vCenter.Networking.vSwitch.Name }}"
        switch_version: "{% if Deploy.Software.vCenter.vSwitch == Deploy.Software.ESXi.vSwitch %}{{ omit }}\
                         {% else %}{{ Deploy.Software.ESXi.vSwitch }}{% endif %}"
        mtu: "{{ Nested_vCenter.Networking.vSwitch.Config.MTU }}"
        uplink_quantity: "{{ Nested_vCenter.Networking.vSwitch.Config.NumberOfUplinks }}"
        discovery_proto: "{{ Nested_vCenter.Networking.vSwitch.Config.LinkDiscoveryProtocol.Type }}"
        discovery_operation: "{{ Nested_vCenter.Networking.vSwitch.Config.LinkDiscoveryProtocol.Operation }}"
        state: present

    - name: Create Port Groups
      community.vmware.vmware_dvs_portgroup:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        portgroup_name: "{{ item.value.Name }}"
        switch_name: "{{ Nested_vCenter.Networking.vSwitch.Name }}"
        vlan_trunk: "{{ item.value.VLAN.Trunk }}"
        vlan_id: "{{ item.value.VLAN.ID }}"
        num_ports: "{{ item.value.NumPorts }}"
        port_binding: "{{ item.value.PortBinding }}"
        teaming_policy:
          active_uplinks: "{{ item.value.Teaming.ActiveUplinks }}"
          standby_uplinks: "{% if item.value.Teaming.StandbyUplinks is none %}{{ omit }}{% else %}{{ item.value.Teaming.StandbyUplinks }}{% endif %}"
        network_policy:
          inherited: "{% if Target.Deployment == 'Host' %}{{ omit }}{% else %}false{% endif %}"
          forged_transmits: "{{ item.value.Security.ForgedTransmits }}"
          mac_changes: "{{ item.value.Security.MACAddressChanges }}"
          promiscuous: "{{ item.value.Security.PromiscuousMode }}"
        state: "{{ item.value.State }}"
      loop: "{{ Nested_vCenter.Networking.vSwitch.PortGroup | dict2items }}"

    - name: Migrate uplinks to the VDS
      community.vmware.vmware_dvs_host:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        esxi_hostname: "{{ item.value.FQDN | lower }}"
        switch_name: "{{ Nested_vCenter.Networking.vSwitch.Name }}"
        vmnics:
          - vmnic1
          - vmnic2
        state: present
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']

    - name: Migrate vmk0 to the VDS
      community.vmware.vmware_migrate_vmk:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        esxi_hostname: "{{ item.value.FQDN | lower }}"
        device: 'vmk0'
        current_switch_name: 'vSwitch0'
        current_portgroup_name: 'Management Network'
        migrate_switch_name: "{{ Nested_vCenter.Networking.vSwitch.Name }}"
        migrate_portgroup_name: "{{ item.value.vmk.vmk0.PortGroup }}"
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']

    - name: Create vmk1 for vMotion
      community.vmware.vmware_vmkernel:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        esxi_hostname: "{{ item.value.FQDN | lower }}"
        portgroup_name: "{{ item.value.vmk.vmk1.PortGroup }}"
        dvswitch_name: "{{ Nested_vCenter.Networking.vSwitch.Name }}"
        enable_vmotion: true
        mtu: "{{ item.value.vmk.vmk1.MTU }}"
        network:
          type: 'static'
          ip_address: "{{ item.value.vmk.vmk1.Address.IPv4.Address }}"
          subnet_mask: "{{ (item.value.vmk.vmk1.Address.IPv4.Address + '/' + item.value.vmk.vmk1.Address.IPv4.Prefix) | ansible.utils.ipaddr('netmask') }}"
          tcpip_stack: "{{ item.value.vmk.vmk1.Stack }}"
        state: present
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']

    - name: Configure vMotion TCP/IP stack gateway address on Nested_ESXi hosts
      community.vmware.vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        vm_id: "{{ item.value.VMName }}"
        vm_username: "{{ item.value.User }}"
        vm_password: "{{ item.value.Password }}"
        vm_shell: /bin/esxcli
        vm_shell_args: "network ip route ipv4 add --netstack vmotion --network default --gateway {{ item.value.vmk.vmk1.Address.IPv4.Gateway }}"
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']

    - name: Create vmk2 for vSAN
      community.vmware.vmware_vmkernel:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        esxi_hostname: "{{ item.value.FQDN | lower }}"
        portgroup_name: "{{ item.value.vmk.vmk2.PortGroup }}"
        dvswitch_name: "{{ Nested_vCenter.Networking.vSwitch.Name }}"
        enable_vsan: true
        mtu: "{{ item.value.vmk.vmk2.MTU }}"
        network:
          type: 'static'
          ip_address: "{{ item.value.vmk.vmk2.Address.IPv4.Address }}"
          subnet_mask: "{{ (item.value.vmk.vmk2.Address.IPv4.Address + '/' + item.value.vmk.vmk2.Address.IPv4.Prefix) | ansible.utils.ipaddr('netmask') }}"
          tcpip_stack: "{{ item.value.vmk.vmk2.Stack }}"
        state: present
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']

    - name: Create vmk3 for IP Storage
      community.vmware.vmware_vmkernel:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        esxi_hostname: "{{ item.value.FQDN | lower }}"
        portgroup_name: "{{ item.value.vmk.vmk3.PortGroup }}"
        dvswitch_name: "{{ Nested_vCenter.Networking.vSwitch.Name }}"
        mtu: "{{ item.value.vmk.vmk3.MTU }}"
        network:
          type: 'static'
          ip_address: "{{ item.value.vmk.vmk3.Address.IPv4.Address }}"
          subnet_mask: "{{ (item.value.vmk.vmk3.Address.IPv4.Address + '/' + item.value.vmk.vmk3.Address.IPv4.Prefix) | ansible.utils.ipaddr('netmask') }}"
          tcpip_stack: "{{ item.value.vmk.vmk3.Stack }}"
        state: present
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']

    - name: Remove the standard switch from the ESXi hosts
      community.vmware.vmware_vswitch:
        hostname: '{{ item.value.FQDN }}'
        username: '{{ item.value.User }}'
        password: '{{ item.value.Password }}'
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        switch: 'vSwitch0'
        state: absent
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']
