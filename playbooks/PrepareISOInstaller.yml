##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/PrepareISOInstaller.yml
##
---
- name: PrepareISOInstaller.yml
  hosts: localhost
  vars:
    isoextractpoint: "{{ Target.TempFolder }}/isos/{{ Deploy.Software.ESXi.Vendor }}_{{ Deploy.Software.ESXi.Product }}_{{ Deploy.Software.ESXi.Version }}"
  tasks:
    - name: PrepareISOInstaller_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                     Target.Datastore: {{ Target.Datastore }}
                                     Target.ISOFolder: {{ Target.ISOFolder }}
                                    Target.TempFolder: {{ Target.TempFolder }}

                                        isoextractpoint: {{ isoextractpoint }}

                         Deploy.Software.ESXi.Version: {{ Deploy.Software.ESXi.Version }}
                       Deploy.Software.ESXi.Installer: {{ Deploy.Software.ESXi.Installer }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables

    - name: Create temp directory
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}"
        state: directory
        mode: "755"

    - name: Extract ESXi ISO
      ansible.builtin.command: "xorriso -osirrox on -indev {{ Deploy.Software.ESXi.Directory }}/{{ Deploy.Software.ESXi.File }} \
                                -extract / {{ isoextractpoint }}"
      changed_when: false

    - name: Add write permission to extracted files
      ansible.builtin.file:
        path: "{{ isoextractpoint }}"
        state: directory
        recurse: true
        mode: u+w

    - name: Copy BOOT.CFG from the ESXi isoextractpoint
      ansible.builtin.copy:
        src: "{{ isoextractpoint }}/BOOT.CFG"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"
        mode: "666"
      tags: esxi-install-media

    - name: Edit BOOT.CFG
      ansible.builtin.replace:
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/BOOT.CFG"
        regexp: 'kernelopt=.*'
        replace: 'kernelopt=ks=cdrom:/{{ Deploy.Software.ESXi.Config }}'
      tags: esxi-install-media

    - name: Create a directory for each nested ESXi host
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
        state: directory
        mode: "755"
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when: Nested_Cluster[item.value.Cluster]['DeployHosts']
      tags: esxi-install-media

    - name: Create kickstart file for each nested ESXi host
      ansible.builtin.template:
        src: "{{ Target.TemplateFolder }}/{{ Deploy.Software.ESXi.Template }}"
        dest: "{{ Target.TempFolder }}/{{ item.value.VMName }}/{{ Deploy.Software.ESXi.Config }}"
        mode: "666"
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when: Nested_Cluster[item.value.Cluster]['DeployHosts']
      tags: esxi-install-media

    - name: Create custom ESXi ISO for each nested ESXi host
      ansible.builtin.command: "xorrisofs -relaxed-filenames -J -R -o {{ Target.TempFolder }}/{{ Pod.Number }}{{ item.key }} \
                              -b ISOLINUX.BIN -c BOOT.CAT -no-emul-boot -boot-load-size 4 -boot-info-table {{ isoextractpoint }}/ \
                              {{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/ \
                              {{ Target.TempFolder }}/{{ item.value.VMName }}/{{ Deploy.Software.ESXi.Config }}"
      args:
        chdir: "{{ Target.TempFolder }}/{{ item.value.VMName }}/"
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when: Nested_Cluster[item.value.Cluster]['DeployHosts']
      tags: esxi-install-media

    - name: Upload the ESXi ISO to the datastore
      community.vmware.vsphere_copy:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Target.DataCenter }}"
        src: "{{ Target.TempFolder }}/{{ Pod.Number }}{{ item.key }}"
        datastore: "{{ Target.Datastore }}"
        path: "{{ Target.ISOFolder }}/{{ Pod.Number }}{{ item.key }}"
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when: Nested_Cluster[item.value.Cluster]['DeployHosts']
      tags: esxi-install-media

    - name: Delete local isoextractpoint directory
      ansible.builtin.file:
        path: "{{ isoextractpoint }}"
        state: absent
      when: not DEBUG.KeepInstallerFiles
      tags: esxi-install-media

    - name: Delete local ISO content directory
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}"
        state: absent
      when: not DEBUG.KeepInstallerFiles
      tags: esxi-install-media

    - name: Delete nested ESXi host directories
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
        state: absent
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']
        - not DEBUG.KeepInstallerFiles
      tags: esxi-install-media

    - name: Delete the ESXi ISO files
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ Pod.Number }}{{ item.key }}"
        state: absent
      loop: "{{ Nested_ESXi.Host | dict2items }}"
      when:
        - Nested_Cluster[item.value.Cluster]['DeployHosts']
        - not DEBUG.KeepInstallerFiles
      tags: esxi-install-media
