##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/ConfigureRouter.yml
##
## ToDo Items: 1) The "Apply VyOS Baseline Router Configuration to {{ Nested_Router.Name }}" task has an "ignore_errors: true" on it so that it can be re-run.
##                This is a work-around.  Need to add logic which sets the password to use if the 'vyos' password fails. (Luis)
##
##   Comments: 1) The purpose of this module is to configure an already deployed router that is configured with
##                an IP address, and is reachable via SSH on it's eth0 interface.
##             2) Attempted using 'ansible-pylibssh', but applying configuration would timeout.  So, using Paramiko.
##
##
---
- hosts: localhost
  name: ConfigureRouter.yml
  connection: ansible.netcommon.network_cli
  vars:
    LOCAL_UserConfigTempFile: "{{ Nested_Router.UserConfig.Template | regex_replace('^(.*).j2$', '\\1', ignorecase=True) }}.conf"
  tasks:
    - name: ConfigureRouter_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================


                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                    Router IP Address: {{ Nested_Router.Interface.Uplink.IPv4.Address }}
               Router Baseline Configuration Template: {{ Target.TemplateFolder }}/{{ Deploy.Software.Router.Template }}
                   Router User Configuration Template: {{ Nested_Router.UserConfig.Directory }}/{{ Nested_Router.UserConfig.Template }}

                        Deploy.Software.Router.Vendor: {{ Deploy.Software.Router.Vendor }}
                       Deploy.Software.Router.Version: {{ Deploy.Software.Router.Version }}
                        Deploy.Software.Router.Config: {{ Deploy.Software.Router.Config }}
                     Deploy.Software.Router.Installer: {{ Deploy.Software.Router.Installer }}

            Deploy.Software.Options.UseLocalInstaller: {{ Deploy.Software.Options.UseLocalInstaller }}
            Deploy.Software.Options.KeepNewInstallers: {{ Deploy.Software.Options.KeepNewInstallers }}

                             LOCAL_UserConfigTempFile: {{ Target.TempFolder }}/{{ LOCAL_UserConfigTempFile }}


          =================================================================================================
      when:
        - DEBUG.DisplayVariables

    - name: Create temp directory
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}"
        state: directory
        mode: "775"
      when:
        - Deploy.Product.Router.Deploy

##
## VyOS Router
##

    - name: Generate VyOS configuration SET and DELETE commands from template (removing comments and empty lines)
      ansible.builtin.set_fact:
        routerconfig: "{{ lookup('template', '{{ Target.TemplateFolder }}/{{ Deploy.Software.Router.Template }}') \
                       | regex_findall('^set.+$|^delete.+$', multiline=true, ignorecase=true) | join('\n') }}"
      when:
        - Deploy.Product.Router.Deploy
        - Deploy.Software.Router.Vendor == "VyOS"

    - name: DEBUG -- Display routerconfig Variable (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display routerconfig Variable ================================
          {{ routerconfig }}
          ===============================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.Router.Deploy
        - Deploy.Software.Router.Vendor == "VyOS"

    - name: Write VyOS router configuration to a file
      ansible.builtin.copy:
        content: "{{ routerconfig }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
        mode: "666"
        force: true
      when:
        - Deploy.Product.Router.Deploy
        - Deploy.Software.Router.Vendor == "VyOS"

    - name: Apply VyOS Baseline Router Configuration to {{ Nested_Router.Name }}
      vyos.vyos.vyos_config:
        src: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
        save: true
      vars:
        ansible_connection: ansible.netcommon.network_cli
        ansible_host: "{{ Nested_Router.Interface.Uplink.IPv4.Address }}"
        ansible_user: vyos
        ansible_password: vyos
        ansible_network_os: vyos.vyos.vyos
      ignore_errors: true
      when:
        - Deploy.Product.Router.Deploy
        - Deploy.Software.Router.Vendor == "VyOS"

##
## Apply Custom User Configuration Commands (if file exists)
##

    - name: Determine directory path to use for file {{ Nested_Router.UserConfig.Template }}
      ansible.builtin.set_fact:
        userconfigdirectory: "{% if Nested_Router.UserConfig.Directory == '~' %}{{ lookup('env', 'HOME') }}\
                              {% else %}{{ Nested_Router.UserConfig.Directory }}{% endif %}"

    - name: See if the template exists
      ansible.builtin.stat:
        path: "{{ userconfigdirectory }}/{{ Nested_Router.UserConfig.Template }}"
      register: userconfigtemplate
      when:
        - Deploy.Product.Router.Deploy

    - name: If UserConfig template exists, generate VyOS Pod-Router commands to apply (removing non-commands and empty lines)
      ansible.builtin.set_fact:
        routeruserconfig: "{{ lookup('template', '{{ userconfigdirectory }}/{{ Nested_Router.UserConfig.Template }}') \
                           | regex_findall('^set.+$|^delete.+$', multiline=true, ignorecase=true) | join('\n') }}"
      when:
        - Deploy.Product.Router.Deploy
        - Deploy.Software.Router.Vendor == "VyOS"
        - userconfigtemplate.stat.exists

    - name: DEBUG -- Display routeruserconfig Variable (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ============================== Display routeruserconfig Variable ==============================
          {{ routeruserconfig }}
          ===============================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.Router.Deploy
        - Deploy.Software.Router.Vendor == "VyOS"
        - userconfigtemplate.stat.exists

    - name: Write VyOS routeruserconfig configuration to a file
      ansible.builtin.copy:
        content: "{{ routeruserconfig }}"
        dest: "{{ Target.TempFolder }}/{{ LOCAL_UserConfigTempFile }}"
        mode: "666"
        force: true
      when:
        - Deploy.Product.Router.Deploy
        - Deploy.Software.Router.Vendor == "VyOS"
        - userconfigtemplate.stat.exists

    - name: Apply VyOS router UserConfig configuration to {{ Nested_Router.Name }}
      vyos.vyos.vyos_config:
        src: "{{ Target.TempFolder }}/{{ LOCAL_UserConfigTempFile }}"
        save: true
      vars:
        ansible_connection: ansible.netcommon.network_cli
        ansible_host: "{{ Nested_Router.Interface.Uplink.IPv4.Address }}"
        ansible_user: vyos
        ansible_password: "{{ Common.Password.Nested }}"
        ansible_network_os: vyos.vyos.vyos
      when:
        - Deploy.Product.Router.Deploy
        - Deploy.Software.Router.Vendor == "VyOS"
        - userconfigtemplate.stat.exists

##
## Clean Up -- All Routers
##

    - name: Delete the router baseline configuration for {{ Nested_Router.Name }}
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
        state: absent
      when:
        - Deploy.Product.Router.Deploy
        - not DEBUG.KeepConfigFiles

    - name: Delete the UserConfig configuration for {{ Nested_Router.Name }}
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}/{{ LOCAL_UserConfigTempFile }}"
        state: absent
      when:
        - Deploy.Product.Router.Deploy
        - not DEBUG.KeepConfigFiles
        - userconfigtemplate.stat.exists

##
## Verify configuration was properly applied by testing reachability to management interface
##

    - name: Verify Pod reachability by pinging Pod-Router management interface
      shell: "ping -c 1 {{ Nested_Router.Interface.Management.IPv4.Address }}"
      ignore_errors: true
      register: result
      # Large number of retries allows for a slow conversion of routing protocols
      retries: 20
      delay: 1
      # The space before '0% packet loss' is to ensure it doesn't match '100% packet loss'
      until: '" 0% packet loss" in result.stdout'

    - name: Notify user if unable to ping Pod-Router management interface
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          ================================ Pod Connectivity Issue ================================

            Issue: Unable to ping Pod-Router's management interface from the Ansible Controller.
                   This is usually caused by the Pod-Router not having been properly configured.

            The address we attempted to ping was {{ Nested_Router.Interface.Management.IPv4.Address }}.

          ========================================================================================
      when: '" 0% packet loss" not in result.stdout'

    - name: Issue found, so tell user to quit and investigate the issue
      ansible.builtin.pause:
        seconds: 99999
        prompt: |
          =====================================================================================================
          =========================================  ISSUE(S) FOUND  ==========================================
          =====================================================================================================

             *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*

          In the Pod's current state, the deployment of vCenter Server WILL FAIL after about 30+ minutes.
          For that reason, please abort this deployment by

                                    PRESSING CONTROL-C, FOLLOWED BY THE LETTER "A"

          Once the script has aborted, investigate why there isn't reachability to the Pod-Router's management
          interface.  The three likely causes are:
            1) The VyOS Pod-Router did not deploy propertly.
            2) The Pod-Router did not get properly configured.  In the past, we have seen this been caused
               by VyOS releasing a new version of the VyOS ISO that doesn't process all of the commands.
            3) Dynamic routing protocol(s) did not establish neighbor relationships, and as such, the
               Pod-Router's management interface didn't get advertised to the physical Layer-3 switch.

             *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*   *STOP*

          =====================================================================================================
      when: '" 0% packet loss" not in result.stdout'
