##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/CreateNsxEdgeTn.yml
##
---
- name: CreateNsxEdgeTn.yml
  hosts: localhost
  tasks:
    - name: CreateNsxEdgeTn_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                             Ansible Playbook: {{ ansible_play_name }}

                                            Target.Deployment: {{ Target.Deployment }}

                  Nested_NSXT.Component.LocalManager_VIP.FQDN: {{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}

           Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes: {{ Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

##
## Provision Edge Transport Nodes
##
    - name: Deploy and configure Edge Transport Nodes
      vmware.ansible_for_nsxt.nsxt_transport_nodes:
        hostname: "{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}"
        username: "{{ Nested_NSXT.Credential.admin.Name }}"
        password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        display_name: "{{ item.display_name }}"
        description: "{{ item.description }}"
        host_switch_spec:
          resource_type: StandardHostSwitchSpec
          host_switches: "{{ item.host_switches }}"
        node_deployment_info: "{{ item.node_deployment_info }}"
        tags: "{{ item.tags }}"
        state: present
      loop: "{{ lookup('template', Target.TemplateFolder + '/vars_NSXT_EdgeTransportNodes.j2') | from_yaml }}"
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy
      async: 1800
      poll: 0

    - name: Wait 1 minute for the NSX-T API to process Edge Transport Node deployment information
      ansible.builtin.pause: minutes=1
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Wait until the NSX-T API reports that no Edge Transport Nodes are in "PENDING" state
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/transport-nodes/state?status=PENDING
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 10
        force_basic_auth: true
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: result
      until: (result.json.result_count | default(1)) == 0
      retries: 90
      delay: 60
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Wait until the NSX-T API reports that no Edge Transport Nodes are in "IN_PROGRESS" state
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/transport-nodes/state?status=IN_PROGRESS
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 10
        force_basic_auth: true
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: result
      until: (result.json.result_count | default(1)) == 0
      retries: 90
      delay: 60
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

##
## Disable Password Expiration for all users on NSX-T Edge VMs
##
    - name: Obtain list of Edge Nodes from the Local Manager
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/transport-nodes?node_types=EdgeNode
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 30
        force_basic_auth: true
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: result
      until: result.status == 200
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: DEBUG -- Display EdgeVM result
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =============================== Display EdgeVM result Variable ==================================

          Quantity: {{ result | length }}

          result:
            {{ result | to_nice_yaml(indent=2, width=99999) | indent(2) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Create list of EdgeVM Node IDs
      ansible.builtin.set_fact:
        edgenodeids: "{{ edgenodeids | default([]) + [item.node_id] }}"
      loop: "{{ result.json.results }}"
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: DEBUG -- Display edgenodeids variable
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display edgenodeids Variable ===================================

          Quantity: {{ edgenodeids | length }}

          edgenodeids:
            {{ edgenodeids | to_nice_yaml(indent=2, width=99999) | indent(2) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Obtain NSX-T Local Manager User List from first EdgeVM
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/transport-nodes/{{ edgenodeids[0] }}/node/users
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 30
        force_basic_auth: true
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: userlist
      until: userlist.status == 200
      retries: 10
      delay: 60
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: DEBUG -- Display userlist variable
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================== Display userlist Variable ====================================

          Quantity: {{ userlist | length }}

          userlist:
            {{ userlist | to_nice_yaml(indent=2, width=99999) | indent(2) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Loop through each NSX-T Edge, disabling password expiration for each user on that Edge node
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/transport-nodes/{{ item.1 }}/node/users/{{ item.0.userid }}
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 60
        force_basic_auth: true
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: PUT
        body_format: json
        body: '{ "password_change_frequency": 0 }'
        return_content: true
        status_code: 200
      register: result
      until: result.status == 200
      retries: 10
      delay: 3
      with_nested:
        - "{{ userlist.json.results }}"
        - "{{ edgenodeids }}"
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy


##
## In NSX-T v3.2.0, in the previous task where the User Accounts password change frequency is set to 0 (==Do Not Expire),
## the EdgeVM nodes briefly transition into "IN_PROGRESS" states for each User Account that is reconfigured before
## returning to the "SUCCESS" state.  To ensure subsequent playbooks don't run into any issues with an EdgeVM not being
## in the "SUCCESS" state, a small delay is introduced (to allow the EdgeVMs to return to "SUCCESS" state), followed by
## a verification that all EdgeVMs are indeed in a "SUCCESS" state.
##
    - name: Add delay to allow all EdgeVM nodes to reach 'SUCCESS' state
      ansible.builtin.pause:
        minutes: 1
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Verify all EdgeVM Nodes report as being in a realized 'SUCCESS' state
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/transport-nodes/state?status=SUCCESS
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 20
        force_basic_auth: true
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: result
      until: result.status == 200 and ((result | community.general.json_query(query) | length) == (Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes | length))
      retries: 10
      delay: 30
      vars:
        # JSON Query returns all EdgeVMs from the list of ALL the Transport Nodes (Host & Edges) we received from the REST API call
        query: json.results[?node_deployment_state.state=='NODE_READY']
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy
