##
##      Project: SDDC.Lab
##      Authors: Luis Chanu & Rutger Blom
##     Filename: playbooks/ConfigureAlbClouds.yml
##
##  Description: This playbook sets the Admin user password, configures DNS and NTP on the ALB Controller node(s),
##               and the ALB Controller Cluster VIP.
##
---
- hosts: localhost
  name: ConfigureAlbClouds.yml
  vars:
    avi_credentials:
      username: "{{ Nested_ALB.Credential.admin.Name }}"
      password: "{{ Nested_ALB.Credential.admin.Password }}"
      controller: "{{ Nested_ALB.Component.Controller_VIP.FQDN }}"
      api_version: "{{ Deploy.Software.ALB.Version }}"
  tasks:
    - name: ConfigureAlbClouds_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                     Ansible Playbook: {{ ansible_play_name }}

                                          ALB Version: {{ Deploy.Software.ALB.Version }}
                              ALB Controller VIP FQDN: {{ Nested_ALB.Component.Controller_VIP.FQDN }}
                                       ALB Admin User: {{ Nested_ALB.Credential.admin.Name }}
                                   ALB Admin Password: {{ Nested_ALB.Credential.admin.Password }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables

##
## Create ALB Cloud User Credentials
##
    - name: Add vCenter User Credentials
      vmware.alb.avi_cloudconnectoruser:
        avi_credentials: "{{ avi_credentials }}"
        state: present
        name: "{{ SiteCode }} vCenter"
        vcenter_credentials:
          username: "{{ Nested_vCenter.User }}"
          password: "{{ Nested_vCenter.Password }}"
      register: vcenter_user
      when:
        - Deploy.Product.ALB.Deploy

    - name: Add NSX-T User Credentials
      vmware.alb.avi_cloudconnectoruser:
        avi_credentials: "{{ avi_credentials }}"
        state: present
        name: "{{ SiteCode }} NSX-T"
        nsxt_credentials:
          username: "{{ Nested_NSXT.Credential.admin.Name }}"
          password: "{{ Nested_NSXT.Credential.admin.Password }}"
      when:
        - Deploy.Product.ALB.Deploy
        - Deploy.Product.NSXT.LocalManager.Deploy


##
## Get and store vSphere Content Library ID
##
    - name: Get list of all vSphere Content Library IDs
      community.vmware.vmware_content_library_info:
        hostname: "{{ Nested_vCenter.FQDN | lower }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
      register: result
      when:
        - Deploy.Product.ALB.Deploy

    - name: Get details on each of the vSphere Content Libraries
      community.vmware.vmware_content_library_info:
        hostname: "{{ Nested_vCenter.FQDN | lower }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        library_id: "{{ loop_var }}"
      register: content_libraries
      loop: "{{ result.content_libs }}"
      loop_control:
        loop_var: loop_var
      when:
        - Deploy.Product.ALB.Deploy

    - name: Query Content Library list for the vSphere Content Library we want to use
      ansible.builtin.set_fact:
        content_library: "{{ content_libraries | community.general.json_query(query) }}"
      vars:
        query: "results[*].content_lib_details[?library_name=='{{ Nested_vCenter.ContentLibrary.Local.Name }}'].library_id|[0]|[0]"
      when:
        - Deploy.Product.ALB.Deploy


##
## Add vCenter Server to ALB
##
    - name: Add vCenter Server via ALB API
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/vcenterserver
        validate_certs: false
        timeout: 15
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        headers:
          X-Avi-Version: "{{ Deploy.Software.ALB.Version }}"
        method: POST
        body_format: json
        body: |
          {
            "cloud_ref": "https://pod-210-alb-controller.sddc.lab/api/cloud/cloud-62d07d91-8157-4646-bed8-30d5096fb994",
            "content_lib": {
              "id": "{{ content_library }}",
              "name": "{{ Nested_vCenter.ContentLibrary.Local.Name }}"
            },
            "name": "{{ SiteCode }} vCenter",
            "vcenter_credentials_ref": "{{ vcenter_user.obj.url }}",
            "vcenter_url": "{{ Nested_vCenter.FQDN }}"
          }
        return_content: true
        status_code: [201, 409]
      register: vcenter
      when:
        - Deploy.Product.ALB.Deploy


##
## Add and Configure ALB Clouds
##
    - name: Add vSphere Cloud
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials }}"
        state: present
        name: "{{ SiteCode }} vSphere"
        obj_name_prefix: "{{ SiteCode }}-vSphere"
        dhcp_enabled: true
        vcenter_configuration:
          datacenter: "{{ Nested_vCenter.DataCenter }}"
          username: "{{ Nested_vCenter.User }}"
          password: "{{ Nested_vCenter.Password }}"
          vcenter_url: "{{ Nested_vCenter.FQDN }}"
          use_content_lib: true
          content_lib:
            name: "{{ Nested_vCenter.ContentLibrary.Local.Name }}"
            id: "{{ content_library }}"
          privilege: WRITE_ACCESS
        vtype: CLOUD_VCENTER
      register: vsphere_cloud
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.vSphere.Configure

    - name: Add delay to allow ALB API to process new vSphere Cloud
      ansible.builtin.pause:
        seconds: 10
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.vSphere.Configure

    - name: Fetch vCenter Network information through ALB API
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/vimgrnwruntime?name={{ Nested_vCenter.Networking.vSwitch.PortGroup.ServiceVMs.Name }}&fields=url
        validate_certs: false
        timeout: 15
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        headers:
          X-Avi-Version: "{{ Deploy.Software.ALB.Version }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: vimgrnwruntime
      when:
        - Deploy.Product.ALB.Deploy

    - name: Save the vimgrnwruntime URL of the Pod ServiceVMs Port Group for later use.
      ansible.builtin.set_fact:
        mgmt_portgroup_url: "{{ vimgrnwruntime | community.general.json_query(query) }}"
      vars:
        query: "json.results[*].url|[0]"
      when:
        - Deploy.Product.ALB.Deploy

    - name: Configure the ServiceVMs Port Group as Management Network on vSphere Cloud
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials }}"
        state: present
        name: "{{ SiteCode }} vSphere"
        obj_name_prefix: "{{ SiteCode }}-vSphere"
        dhcp_enabled: true
        vcenter_configuration:
          datacenter: "{{ Nested_vCenter.DataCenter }}"
          management_network: "{{ mgmt_portgroup_url }}"
          username: "{{ Nested_vCenter.User }}"
          password: "{{ Nested_vCenter.Password }}"
          vcenter_url: "{{ Nested_vCenter.FQDN }}"
          use_content_lib: true
          content_lib:
            name: "{{ Nested_vCenter.ContentLibrary.Local.Name }}"
            id: "{{ content_library }}"
          privilege: WRITE_ACCESS
        vtype: CLOUD_VCENTER
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.vSphere.Configure
