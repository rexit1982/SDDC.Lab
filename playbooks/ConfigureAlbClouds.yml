##
##      Project: SDDC.Lab
##      Authors: Luis Chanu & Rutger Blom
##     Filename: playbooks/ConfigureAlbClouds.yml
##
##  Description: This playbook sets the Admin user password, configures DNS and NTP on the ALB Controller node(s),
##               and the ALB Controller Cluster VIP.
##
---
- hosts: localhost
  name: ConfigureAlbClouds.yml
  vars:
    avi_credentials:
      username: "{{ Nested_ALB.Credential.admin.Name }}"
      password: "{{ Nested_ALB.Credential.admin.Password }}"
      controller: "{{ Nested_ALB.Component.Controller_VIP.FQDN | lower }}"
      api_version: "{{ Deploy.Software.ALB.Version }}"
  tasks:
    - name: ConfigureAlbClouds_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                                       Ansible Playbook: {{ ansible_play_name }}

                                                            ALB Version: {{ Deploy.Software.ALB.Version }}
                                                ALB Controller VIP FQDN: {{ Nested_ALB.Component.Controller_VIP.FQDN }}
                                                         ALB Admin User: {{ Nested_ALB.Credential.admin.Name }}
                                                     ALB Admin Password: {{ Nested_ALB.Credential.admin.Password }}

                                                    Nested vCenter FQDN: {{ Nested_vCenter.FQDN | lower }}
                                         Content Library for ALB SE VMs: {{ Nested_vCenter.ContentLibrary.Local.Name }}
                         vSphere Cluster for ALB SE VMs (vSphere Cloud): {{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.vSphere.AdvancedSetting.Cluster }}
                               VM Folder for ALB SE VMs (vSphere Cloud): {{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.vSphere.AdvancedSetting.ServiceEngineFolder }}
                       Management Port Group ALB SE VMs (vSphere Cloud): {{ Nested_vCenter.Networking.vSwitch.PortGroup.ServiceVMs.Name }}
                                  ALB SE VM Name Prefix (vSphere Cloud): {{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.vSphere.AdvancedSetting.ServiceEngineNamePrefix }}
                               ALB SE VM Memory Reserve (vSphere Cloud): {{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.vSphere.BasicSetting.MemoryReserve }}

                           vSphere Cluster for ALB SE VMs (NSX-T Cloud): {{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.AdvancedSetting.Cluster }}
                                 VM Folder for ALB SE VMs (NSX-T Cloud): {{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.AdvancedSetting.ServiceEngineFolder }}
                             Management Port Group ALB SE (NSX-T Cloud): SEG-ALB-SE-Management
                                   Data Port Group ALB SE (NSX-T Cloud): SEG-ALB-SE-Data
                       Tier-1 Gateway ALB: T1-Gateway-ALB (NSX-T Cloud): T1-Gateway-ALB
                                     ALB SE VM Name Prefix (NSXT Cloud): {{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.AdvancedSetting.ServiceEngineNamePrefix }}
                                  ALB SE VM Memory Reserve (NSXT Cloud): {{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.BasicSetting.MemoryReserve }}
          =================================================================================================
      when:
        - DEBUG.DisplayVariables


##  ██████  ██       ██████  ██████   █████  ██
## ██       ██      ██    ██ ██   ██ ██   ██ ██
## ██   ███ ██      ██    ██ ██████  ███████ ██
## ██    ██ ██      ██    ██ ██   ██ ██   ██ ██
##  ██████  ███████  ██████  ██████  ██   ██ ███████


    - name: Start checking if the ALB API is responding on Cluster VIP
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/controllerproperties
        validate_certs: false
        timeout: 10
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: result
      until: result.status == 200 and result.json.uuid == "global"
      retries: 10
      delay: 60
      when:
        - Deploy.Product.ALB.Deploy

    - name: Get list of all vSphere Content Library IDs
      community.vmware.vmware_content_library_info:
        hostname: "{{ Nested_vCenter.FQDN | lower }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
      register: result
      when:
        - Deploy.Product.ALB.Deploy

    - name: Get details on each of the vSphere Content Libraries
      community.vmware.vmware_content_library_info:
        hostname: "{{ Nested_vCenter.FQDN | lower }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        library_id: "{{ loop_var }}"
      register: content_libraries
      loop: "{{ result.content_libs }}"
      loop_control:
        loop_var: loop_var
      when:
        - Deploy.Product.ALB.Deploy

    - name: Query Content Library list for the vSphere Content Library we want to use
      ansible.builtin.set_fact:
        content_library_id: "{{ content_libraries | community.general.json_query(query) }}"
      vars:
        query: "results[*].content_lib_details[?library_name=='{{ Nested_vCenter.ContentLibrary.Local.Name }}'].library_id|[0]|[0]"
      when:
        - Deploy.Product.ALB.Deploy


## ███    ██ ███████ ██   ██       ████████      ██████ ██       ██████  ██    ██ ██████
## ████   ██ ██       ██ ██           ██        ██      ██      ██    ██ ██    ██ ██   ██
## ██ ██  ██ ███████   ███   █████    ██        ██      ██      ██    ██ ██    ██ ██   ██
## ██  ██ ██      ██  ██ ██           ██        ██      ██      ██    ██ ██    ██ ██   ██
## ██   ████ ███████ ██   ██          ██         ██████ ███████  ██████   ██████  ██████


    - name: Add vCenter User Credentials - NSX-T Cloud
      vmware.alb.avi_cloudconnectoruser:
        avi_credentials: "{{ avi_credentials }}"
        state: present
        name: "{{ SiteCode }} vCenter"
        vcenter_credentials:
          username: "{{ Nested_vCenter.User }}"
          password: "{{ Nested_vCenter.Password }}"
      register: vcenter_user
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Add NSX-T User Credentials - NSX-T Cloud
      vmware.alb.avi_cloudconnectoruser:
        avi_credentials: "{{ avi_credentials }}"
        state: present
        name: "{{ SiteCode }} NSX-T"
        nsxt_credentials:
          username: "{{ Nested_NSXT.Credential.admin.Name }}"
          password: "{{ Nested_NSXT.Credential.admin.Password }}"
      register: nsxt_user
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Get information on NSX-T Transport Zones - NSX-T Cloud
      vmware.ansible_for_nsxt.nsxt_transport_zones_facts:
        hostname: "{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}"
        username: "{{ Nested_NSXT.Credential.admin.Name }}"
        password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
      register: nsxt_tz
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Save NSX-T Overlay Transport Zone ID for later use - NSX-T Cloud
      ansible.builtin.set_fact:
        nsxt_overlaytz_id: "{{ nsxt_tz | community.general.json_query(query) }}"
      vars:
        query: "results[?display_name=='TZ-Overlay'].id|[0]"
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Add NSX-T Cloud - NSX-T Cloud
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials }}"
        state: present
        name: "{{ SiteCode }} NSX-T"
        obj_name_prefix: "{{ SiteCode }}-NSX-T"
        dhcp_enabled: true
        nsxt_configuration:
          automate_dfw_rules: false
          data_network_config:
            tier1_segment_config:
              manual:
                tier1_lrs:
                  - segment_id: /infra/segments/SEG-ALB-SE-Data
                    tier1_lr_id: /infra/tier-1s/T1-Gateway-ALB
              segment_config_mode: TIER1_SEGMENT_MANUAL
            transport_zone: "/infra/sites/default/enforcement-points/default/transport-zones/{{ nsxt_overlaytz_id }}"
            tz_type: OVERLAY
          management_network_config:
            overlay_segment:
              segment_id: /infra/segments/SEG-ALB-SE-Management
              tier1_lr_id: /infra/tier-1s/T1-Gateway-ALB
            transport_zone: "/infra/sites/default/enforcement-points/default/transport-zones/{{ nsxt_overlaytz_id }}"
            tz_type: OVERLAY
          nsxt_credentials_ref: "{{ nsxt_user.obj.url }}"
          nsxt_url: "{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}"
        vtype: CLOUD_NSXT
      register: nsxt_cloud
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Check if a vCenter Server is already configured via ALB API - NSX-T Cloud
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/vcenterserver
        validate_certs: false
        timeout: 15
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        headers:
          X-Avi-Version: "{{ Deploy.Software.ALB.Version }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: vcenter_config_status
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Add vCenter Server via ALB API - NSX-T Cloud
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/vcenterserver
        validate_certs: false
        timeout: 15
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        headers:
          X-Avi-Version: "{{ Deploy.Software.ALB.Version }}"
        method: POST
        body_format: json
        body: |
          {
              "cloud_ref": "{{ nsxt_cloud.obj.url }}",
              "content_lib": {
                  "id": "{{ content_library_id }}",
                  "name": "{{ Nested_vCenter.ContentLibrary.Local.Name }}"
              },
              "name": "{{ SiteCode }} vCenter",
              "vcenter_credentials_ref": "{{ vcenter_user.obj.url }}",
              "vcenter_url": "{{ Nested_vCenter.FQDN }}"
          }
        return_content: true
        status_code: 201
      when:
        - (vcenter_config_status.json.count | default(1)) == 0
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Wait until the ALB API reports that the Cloud is in READY state - NSX-T Cloud
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/cloud/{{ nsxt_cloud.obj.uuid }}/status/
        validate_certs: false
        timeout: 15
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        headers:
          X-Avi-Version: "{{ Deploy.Software.ALB.Version }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: result
      until: (result.json.state == 'CLOUD_STATE_PLACEMENT_READY')
      retries: 10
      delay: 60
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Get infomation on vCenter Server via ALB API - NSX-T Cloud
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/vcenterserver
        validate_certs: false
        timeout: 15
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        headers:
          X-Avi-Version: "{{ Deploy.Software.ALB.Version }}"
        body_format: json
        return_content: true
        status_code: 200
      register: vcenter
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Save vCenter Server URL for later use - NSX-T Cloud
      ansible.builtin.set_fact:
        vcenter_url: "{{ vcenter | community.general.json_query(query) }}"
      vars:
        query: "json.results[*].url|[0]"
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Create VM Folder for Service Engines - NSX-T Cloud
      community.vmware.vcenter_folder:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Nested_vCenter.DataCenter }}"
        folder_type: vm
        folder_name: "{{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.AdvancedSetting.ServiceEngineFolder }}"
        state: present
      register: vmfolder
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Get information about VM Folders - NSX-T Cloud
      community.vmware.vmware_folder_info:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Nested_vCenter.DataCenter }}"
      register: vmfolders
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Get Managed Object ID for VM Folder - NSX-T Cloud
      ansible.builtin.set_fact:
        vmfolder_moref: "{{ (vmfolders.flat_folder_info | selectattr('path', 'equalto', vmfolder.result.path) | map(attribute='moid'))[0] }}"
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Get information on Service Engine "Default-Group" via ALB API - NSX-T Cloud
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/serviceenginegroup?fields=url&cloud_ref.name={{ SiteCode }}%20NSX-T
        validate_certs: false
        timeout: 15
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        headers:
          X-Avi-Version: "{{ Deploy.Software.ALB.Version }}"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: nsxt_serviceenginegroup
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Save UUID of Service Engine "Default-Group" for later use - NSX-T Cloud
      ansible.builtin.set_fact:
        nsxt_serviceenginegroup_uuid: "{{ nsxt_serviceenginegroup | community.general.json_query(query) }}"
      vars:
        query: "json.results[*].uuid|[0]"
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Get information on configured vSphere Cluster via ALB API - NSX-T Cloud
      community.vmware.vmware_cluster_info:
        hostname: "{{ Nested_vCenter.FQDN | lower }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        cluster_name: "{{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.AdvancedSetting.Cluster }}"
        validate_certs: false
      register: vsphere_cluster
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Save MoRefID of the vSphere Cluster for later use - NSX-T Cloud
      ansible.builtin.set_fact:
        vsphere_cluster_moref: "{{ vsphere_cluster | community.general.json_query(query) }}"
      vars:
        query: "clusters.{{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.AdvancedSetting.Cluster }}.moid"
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy

    - name: Update Service Engine "Default-Group" settings via ALB API - NSX-T Cloud
      ansible.builtin.uri:
        url: https://{{ Nested_ALB.Component.Controller_VIP.FQDN }}/api/serviceenginegroup/{{ nsxt_serviceenginegroup_uuid }}
        validate_certs: false
        timeout: 15
        force_basic_auth: true
        url_username: "{{ Nested_ALB.Credential.admin.Name }}"
        url_password: "{{ Nested_ALB.Credential.admin.Password }}"
        headers:
          X-Avi-Version: "{{ Deploy.Software.ALB.Version }}"
        method: PATCH
        body_format: json
        body: |
          {
              "add": {
                  "mem_reserve": "{{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.BasicSetting.MemoryReserve }}",
                  "se_name_prefix": "{{ Nested_ALB.Infrastructure.CloudResource.ServiceEngineGroup.Cloud.NSXT.AdvancedSetting.ServiceEngineNamePrefix }}",
                  "vcenters": [
                      {
                          "nsxt_clusters": {
                              "cluster_ids": [
                                  "{{ vsphere_cluster_moref }}"
                              ],
                              "include": true
                          },
                          "vcenter_folder": "{{ vmfolder_moref }}",
                          "vcenter_ref": "{{ vcenter_url }}"
                      }
                  ]
              }
          }
        return_content: true
        status_code: 200
      when:
        - Deploy.Product.ALB.Deploy
        - Nested_ALB.Infrastructure.Cloud.NSXT.Configure
        - Deploy.Product.NSXT.LocalManager.Deploy
        - Deploy.Product.NSXT.Edge.Deploy
