##
##    Project: SDDC.Lab
##    Authors: Aaron Ellis
##   Filename: playbooks/DeployVCFImportTool.yml
##
---
- name: DeployVCFImportTool.yml
  hosts: localhost
  vars:
    - LOCAL_PrecheckDestination: "{{ lookup('env','HOME') }}"

  tasks:
    - name: DeployVCFImportTool_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" Deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/CreatePodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d' | format(Pod.Number | int) }} ==================================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                       Target.Cluster: {{ Target.Cluster }}
                                    Target.DataCenter: {{ Target.DataCenter }}
                                     Target.Datastore: {{ Target.Datastore }}
                                      Target.VMFolder: {{ Target.VMFolder }}

                                            VCSA FQDN: {{ Nested_vCenter.FQDN }}
                                         VCSA VM Name: {{ Nested_vCenter.VMName }}
                                   VCSA root Password: {{ Nested_vCenter.Password }}
                                  VCSA SSO Admin User: {{ Nested_vCenter.User }}
                                      VCSA SSO Domain: {{ Nested_vCenter.SSO.Domain }}
                                     SDDCManager FQDN: {{ Nested_SDDCManager.Component.Appliance.FQDN }}
                                SDDCManager root User: {{ Nested_SDDCManager.Credential.root.Name }}
                            SDDCManager root Password: {{ Nested_SDDCManager.Credential.root.Password }}
                                 SDDCManager vcf User: {{ Nested_SDDCManager.Credential.vcf.Name }}
                             SDDCManager vcf Password: {{ Nested_SDDCManager.Credential.vcf.Password }}
                             VCFImportTool File: {{ Deploy.Software.VCFImportTool.Directory }}/{{ Deploy.Software.VCFImportTool.File }}


          =================================================================================================
      when:
        - DEBUG.DisplayVariables

    - name: Copy VCFImport Tool to the SDDCManager VM
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Target.DataCenter }}"
        vm_id: "{{ Nested_SDDCManager.Component.Appliance.VMName }}"
        vm_username: "{{ Nested_SDDCManager.Credential.vcf.Name }}"
        vm_password: "{{ Nested_SDDCManager.Credential.vcf.Password }}"
        copy:
          src: "{{ Deploy.Software.VCFImportTool.Directory }}/{{ Deploy.Software.VCFImportTool.File }}"
          dest: "/home/vcf/{{ Deploy.Software.VCFImportTool.File }}"
      delegate_to: localhost
      when:
        - Deploy.Product.VCFImportTool.Deploy

    - name: Extract VCFImport Tool on SDDC Manager vm
      community.vmware.vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Target.DataCenter }}"
        vm_id: "{{ Nested_SDDCManager.Component.Appliance.VMName }}"
        vm_username: "{{ Nested_SDDCManager.Credential.vcf.Name }}"
        vm_password: "{{ Nested_SDDCManager.Credential.vcf.Password }}"
        wait_for_process: true
        vm_shell_cwd: "/home/vcf"
        vm_shell: "/usr/bin/tar"
        vm_shell_args: "-xvf {{ Deploy.Software.VCFImportTool.File }} --strip-components=1"
      when:
        - Deploy.Product.VCFImportTool.Deploy

    - name: Copy VCFImport Tool to the VCSA
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Target.DataCenter }}"
        vm_id: "{{ Nested_vCenter.VMName }}"
        vm_username: "root"
        vm_password: "{{ Nested_vCenter.Password }}"
        copy:
          src: "{{ Deploy.Software.VCFImportTool.Directory }}/{{ Deploy.Software.VCFImportTool.File }}"
          dest: "/root/{{ Deploy.Software.VCFImportTool.File }}"
      delegate_to: localhost
      when:
        - Deploy.Product.VCFImportTool.Deploy

    - name: Extract VCFImportTool on VCSA vm
      community.vmware.vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Target.DataCenter }}"
        vm_id: "{{ Nested_vCenter.VMName }}"
        vm_username: "root"
        vm_password: "{{ Nested_vCenter.Password }}"
        wait_for_process: true
        vm_shell_cwd: "/root"
        vm_shell: "/usr/bin/tar"
        vm_shell_args: "-xvf {{ Deploy.Software.VCFImportTool.File }} --strip-components=1"
      when:
        - Deploy.Product.VCFImportTool.Deploy

    - name: Run VCFImportTool precheck on VCSA vm
      community.vmware.vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Target.DataCenter }}"
        vm_id: "{{ Nested_vCenter.VMName }}"
        vm_username: "root"
        vm_password: "{{ Nested_vCenter.Password }}"
        wait_for_process: true
        vm_shell_cwd: "/root/vcf-brownfield-toolset"
        vm_shell: "/usr/bin/python3"
        vm_shell_args: "vcf_brownfield.py precheck --vcenter '{{ Nested_vCenter.FQDN }}' --sso-user '{{ Nested_vCenter.User }}' --sso-password '{{ Nested_vCenter.Password }}' > {{ Nested_vCenter.VMName }}-vcf-precheck.out"
      when:
        - Deploy.Product.VCFImportTool.Deploy

    - name: Copy VCFImportTool precheck results to local workstation
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        datacenter: "{{ Target.DataCenter }}"
        vm_id: "{{ Nested_vCenter.VMName }}"
        vm_username: "root"
        vm_password: "{{ Nested_vCenter.Password }}"
        fetch:
          src: "/root/vcf-brownfield-toolset/{{ Nested_vCenter.VMName }}-vcf-precheck.out"
          dest: "{{ LOCAL_PrecheckDestination }}/{{ Nested_vCenter.VMName }}-vcf-precheck.out"
      delegate_to: localhost
      when:
        - Deploy.Product.VCFImportTool.Deploy
