##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: Deploy.yml
##
---
# Validate Configuration File and Environment
- ansible.builtin.import_playbook: playbooks/ValidateConfiguration.yml

# Create Pod documentation
- ansible.builtin.import_playbook: playbooks/CreatePodDoc.yml

# Prepare the physical environment
- ansible.builtin.import_playbook: playbooks/PreparePhysical.yml

# Deploy DNS server
- ansible.builtin.import_playbook: playbooks/DeployDNSServer.yml
  when: 
    - Deploy.Product.DNSServer.Deploy

# Populate DNS with forward and reverse DNS records
- ansible.builtin.import_playbook: playbooks/UpdateDNS.yml
  when:
    - Deploy.Setting.UseDNS

# Deploy router
- ansible.builtin.import_playbook: playbooks/DeployRouter.yml
  when: 
    - Deploy.Product.Router.Deploy

# Configure router
- ansible.builtin.import_playbook: playbooks/ConfigureRouter.yml
  when: 
    - Deploy.Product.Router.Deploy

# Deploy nested vSphere
- ansible.builtin.import_playbook: playbooks/PrepareISOInstaller.yml
- ansible.builtin.import_playbook: playbooks/DeployNestedEsxi.yml

- name: Verify Replication Partner vCenter Server is ready
  ansible.builtin.import_playbook: playbooks/CheckVcReplicationPartner.yml
  when:
    - Nested_vCenter.SSO.ReplicationPartner != None

- ansible.builtin.import_playbook: playbooks/DeployVc.yml
- ansible.builtin.import_playbook: playbooks/ConfigureNestedEsxi.yml
- ansible.builtin.import_playbook: playbooks/CreateVds.yml
- ansible.builtin.import_playbook: playbooks/ConfigureVsan.yml
- ansible.builtin.import_playbook: playbooks/ConfigureHA.yml
- ansible.builtin.import_playbook: playbooks/CreateContentLibrary.yml
- ansible.builtin.import_playbook: playbooks/License_vSphere.yml

# Deploy NSX-T
- ansible.builtin.import_playbook: playbooks/DeployNsxGlobalManager.yml
  when: 
    - Deploy.Product.NSXT.Federation.Enable
    - Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode

- ansible.builtin.import_playbook: playbooks/DeployNsxLocalManager.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/License_NSXT-LM.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/ConfigureNsxBasicConfig.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/ConfigureNsxFabricMTU.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/RegisterNsxComputeManager.yml

- ansible.builtin.import_playbook: playbooks/CreateNsxUplinkProfiles.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/CreateNsxTz.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/CreateNsxIpPool.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/CreateNsxTnp.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/AttachNsxTnp.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/CreateNsxEdgeTn.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy
    - Deploy.Product.NSXT.Edge.Deploy

- ansible.builtin.import_playbook: playbooks/CreateNsxEdgeCluster.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy
    - Deploy.Product.NSXT.Edge.Deploy

# Provision NSX-T logical networking
- ansible.builtin.import_playbook: playbooks/EnableNsxIPv6.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy
    - Deploy.Setting.IPv6

- ansible.builtin.import_playbook: playbooks/CreateNsxVLANSegments.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/CreateNsxDhcpProfiles.yml
  when:
    - Deploy.Product.NSXT.Federation.Enable == false

- ansible.builtin.import_playbook: playbooks/CreateNsxT0Gateway.yml
  when: 
    - Deploy.Product.NSXT.Federation.Enable == false or (Deploy.Product.NSXT.Federation.Enable and Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode)       # Only run playbook if deployment is Stand-Alone or if it's Federation and we are deploying Global Manager
    - Deploy.Product.NSXT.LocalManager.Deploy
    - Deploy.Product.NSXT.Edge.Deploy

- ansible.builtin.import_playbook: playbooks/CreateNsxT1Gateway.yml
  when: 
    - Deploy.Product.NSXT.Federation.Enable == false or (Deploy.Product.NSXT.Federation.Enable and Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode)       # Only run playbook if deployment is Stand-Alone or if it's Federation and we are deploying Global Manager
    - Deploy.Product.NSXT.LocalManager.Deploy
    - Deploy.Product.NSXT.Edge.Deploy

- ansible.builtin.import_playbook: playbooks/CreateNsxOverlaySegments.yml
  when: 
    - Deploy.Product.NSXT.Federation.Enable == false or (Deploy.Product.NSXT.Federation.Enable and Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode)       # Only run playbook if deployment is Stand-Alone or if it's Federation and we are deploying Global Manager
    - Deploy.Product.NSXT.LocalManager.Deploy
    - Deploy.Product.NSXT.Edge.Deploy

- ansible.builtin.import_playbook: playbooks/ConfigureNsxBackup.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy

- ansible.builtin.import_playbook: playbooks/FederateNsxLocalManager.yml
  when: 
    - Deploy.Product.NSXT.Federation.Enable

- ansible.builtin.import_playbook: playbooks/FederateNsxEdgeNodes.yml
  when: 
    - Deploy.Product.NSXT.Federation.Enable

- ansible.builtin.import_playbook: playbooks/FederateNsxT0RouteReDist.yml
  when: 
    - Deploy.Product.NSXT.Federation.Enable

- ansible.builtin.import_playbook: playbooks/FederateNsxT0BGPNeighbors.yml
  when: 
    - Deploy.Product.NSXT.Federation.Enable

# Deploy vRealize Log Insight
- ansible.builtin.import_playbook: playbooks/DeployVrli.yml
  when: 
    - Deploy.Product.vRLI.Deploy

- ansible.builtin.import_playbook: playbooks/License_vRLI.yml
  when: 
    - Deploy.Product.vRLI.Deploy

# Deploy Advanced Load Balancer
- ansible.builtin.import_playbook: playbooks/DeployAlb.yml
  when: 
    - Deploy.Product.ALB.Deploy

- ansible.builtin.import_playbook: playbooks/ConfigureAlbBasicConfig.yml
  when: 
    - Deploy.Product.ALB.Deploy

- ansible.builtin.import_playbook: playbooks/ConfigureAlbClouds.yml
  when: 
    - Deploy.Product.ALB.Deploy

# Deploy vSphere Replication (Nested)
- ansible.builtin.import_playbook: playbooks/DeployReplication.yml
  when: 
    - Deploy.Product.Replication.Deploy

- ansible.builtin.import_playbook: playbooks/ConfigureReplicationBasicConfig.yml
  when: 
    - Deploy.Product.Replication.Deploy

# Deploy Tanzu
- ansible.builtin.import_playbook: playbooks/EnableWorkloadManagement.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy
    - Deploy.Product.NSXT.Edge.Deploy

- ansible.builtin.import_playbook: playbooks/License_Tanzu.yml
  when: 
    - Deploy.Product.NSXT.LocalManager.Deploy
    - Deploy.Product.NSXT.Edge.Deploy

# Deploy Workload VM Templates from Content Library
- ansible.builtin.import_playbook: playbooks/DeployWorkloadVms.yml
  when: 
    - Deploy.WorkloadVMs.Deploy
    - Nested_vCenter.ContentLibrary.WorkloadVMs.Enable
    - not Deploy.Product.NSXT.Federation.Enable or (Deploy.Product.NSXT.Federation.Enable and Deploy.Product.NSXT.GlobalManager.SiteCode == SiteCode)       # Only run playbook if deployment is Stand-Alone or if it's Federation and we are deploying Global Manager
    - Deploy.Product.NSXT.LocalManager.Deploy

# Create DRS VM-VM Affinity Rule for deployed Pod VMs (This should be the last playbook within deploy.yml)
- ansible.builtin.import_playbook: playbooks/CreateDrsVmRules.yml
