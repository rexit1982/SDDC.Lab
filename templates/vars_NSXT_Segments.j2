{#
 #       Authors: Luis Chanu & Rutger Blom
 #      Filename: templates/vars_NSXT_Segments.j2
 #       Used By: This file is used by the playbook CreateNsxVLANSegments.yml and CreateNsxOverlaySegments.yml
 #       Purpose: This Jinja2 template file is used to create the data structure that is provided to the nsxt_policy_segments module.
 #
 #   Description: This script creates a data structure containing ALL Segments in the Pod Config file.  It's up 
 #                to the playbook using this template to filter only the type of Segments it wants to process.
 #
 # IP Allocation: Here is a summary of how IPv4 and IPv6 addresses are allocated by this script:
 #                1) If an NSX-T Segment does not have a "Subnets:" entry, then it's assumed to be Layer-2 only, 
 #                   and no IP address is included in the data structure that is created.
 #                2) If an NSX-T Segment does have a "Subnets:" entry, and that entry has a list of subnets beneath
 #                   it, then those explicitly mentioned subnets are allocated/assigned to the Segment.
 #                   This is how you go about creating user-defined IP subnets for a given NSX-T Segment.
 #                3) If an NSX-T Segment does have a "Subnets:" key, but that key does NOT have a list of subnets
 #                   beneath it, then SDDC.Lab will dynamically assign subnets based on the settings within
 #                   the Pod.BaseOverlay data structure.  Whether IPv4 and IPv6 subnets are assigned is driven 
 #                   by the IPv4 and IPv6 Deploy.Setting values:
 #                     a) If Deploy.Setting.IPv4 == TRUE, then an IPv4 subnet will be allocated.
 #                     b) If Deploy.Setting.IPv6 == TRUE, then an IPv6 subnet will be allocated.
 #
 #  DHCP Config: The various DHCP values used are all dynamically derived from an Overlay Segment's Gateway address for both IPv4 and IPv6.
 #                 Constraint/Limitation: DHCP Server is not supported by Federation.  If Federation is enabled, DHCP support is not included.
 #                   DHCP Server Address: One higher (.2) than the Gateway's IP Address (.1)
 #             DHCP Usable Address Range: Usable addresses in the highest subnet (see below) for both IPv4 and IPv6.
 #                            IPv4 Range: Highest Pod.BaseOverlay.IPv4.RangePrefix Subnet, converted into an IPv4 range.
 #                            IPv6 Range: Highest Pod.BaseOverlay.IPv6.RangePrefix Subnet, converted into an IPv6 range.
 #
 #    Important: This file uses the 'do' feature of Jinja.  In order for this to function, the following lines need to be included in the
 #               ansible.cfg file:
 #                                   [defaults]
 #                                   jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n
 #}
{# Define Global Variables using Jinja Namespace #}
{% set ns = namespace() %}
{% set ns.segment_count = 0 %}
{% for Segment in Nested_NSXT.Networking.Segments %}
  - display_name: {{ Segment.Name }}
    description:  {{ Segment.Description }}
    admin_state:  {{ Segment.AdminState }}
    replication_mode: {{ Segment.ReplicationMode }}
    transport_zone_display_name: {{ Segment.TransportZone }}
    domain_name: {{ Common.DNS.Domain }}
    uplink_teaming_policy_name: "{{ Segment.UplinkTeamingPolicy }}"
{# Only add DHCP Profile into structure if Federation is NOT enabled #}
{%   if DHCPProfilePath[Nested_NSXT.Networking.DHCPProfiles[0].Name] is defined and Deploy.Product.NSXT.Federation.Deploy == false %}    dhcp_config_path: {{ DHCPProfilePath[Nested_NSXT.Networking.DHCPProfiles[0].Name] }}{% endif %}

{# DO NOT REMOVE THE EMPTY LINE ABOVE THIS COMMENT #}
{%   if Segment.ConnectedTo is defined %}
{%     if Segment.ConnectedTo.Tier == 0 %}
    tier0_display_name: {{ Segment.ConnectedTo.GatewayName }}
{%     elif Segment.ConnectedTo.Tier == 1 %}
    tier1_display_name: {{ Segment.ConnectedTo.GatewayName }}
{%     endif %}{# Segment.ConnectedTo.Tier == 0 #}
{%   endif %}{# Segment.ConnectedTo is defined #}
    tags:
{###### Make sure Tags is defined ######}
{%   if Segment.Tags is defined %}
{###### If Tags is defined, add them to the list #}
{%     for SingleTag in Segment.Tags %}
      - tag: "{{ SingleTag.Tag | default(None) }}"
        scope: "{{ SingleTag.Scope | default(None) }}"
{%     endfor %}{# Tag #}
{###### If not defined, add one set of "None" entries to ensure 'tags' header has a list member ######}
{%   else %}{# Segment.Tags #}
      - tag: ""
        scope: ""
{%   endif %}{# Segment.Tags is defined #}
{###### Only include 'vlan_ids' for VLAN-backed segments ######}
{%   if Nested_NSXT.System.Fabric.TransportZone[Segment.TransportZone].Type == "VLAN" %}
{###### Verify user included VLANS variable with at least one entry  ######}
{%     if (Segment.VLANS is defined) and (Segment.VLANS|length) > 0 %}
    vlan_ids:
{%       for VLAN in Segment.VLANS %}
      - {{ VLAN }}
{%       endfor %}{# VLAN #}
{%     endif %}{# Segment.VLANS is defined #}
{%   endif %}{# Type==VLAN #}
{###### Only include Subnets for Overlay-backed segments ######}
{%   if Nested_NSXT.System.Fabric.TransportZone[Segment.TransportZone].Type == "OVERLAY" %}
{%     if Segment.Subnets is defined %}{# Only include subnets structure if Subnets is defined.  If not defined, then it's a Layer-2 segment #}
    subnets:
{%       if Segment.Subnets == None %}{# If None, that means there are no Subnets listed, which is what triggers SDDC.Lab to automatically allocate IP addressses #}
{###### IPv4 Settings ######}
{%         if Deploy.Setting.IPv4 %}
{#           Determine first Pod Subnet in /24 (i.e. 10.204.60.0/24) [for Pod 60], and start with that one.  Track number of segments auto-allocated IPs, and increment by number of host IPs for the given Prefix. #}
{%           set ipv4_address = Pod.BaseOverlay.IPv4.Network | ansible.utils.ipsubnet(24, Pod.Number) | ansible.utils.ipmath(ns.segment_count * (2**(32-Pod.BaseOverlay.IPv4.Prefix))) %}
{%           set ipv4_subnet = [ipv4_address, "/", Pod.BaseOverlay.IPv4.Prefix]|join %}

{# DO NOT REMOVE THE EMPTY LINE ABOVE THIS COMMENT #}
      - gateway_address: {{ ipv4_subnet | ansible.utils.ipaddr('1') }}
{%           if Deploy.Product.NSXT.Federation.Deploy == false %}
        dhcp_ranges:
          - {{ ipv4_subnet | ansible.utils.ipsubnet(Pod.BaseOverlay.IPv4.RangePrefix, -1) | ansible.utils.ipaddr('range_usable') }}
        dhcp_config:
          resource_type: SegmentDhcpV4Config
          server_address: {{ ipv4_subnet | ansible.utils.ipaddr('2') }}
          lease_time: {{ Common.DHCP.LeaseTime }}
          dns_servers:
            - {{ Common.DNS.Server1.IPv4 }}
{%           endif %}{# Deploy.Product.NSXT.Federation.Deploy == false #}
{%         endif %}{# Deploy.Setting.IPv4 #}
{###### IPv6 Settings ######}
{%         if (Deploy.Setting.IPv6) %}
{%           set ipv6_subnet = Pod.BaseOverlay.IPv6.Network | ansible.utils.ipsubnet(Pod.BaseOverlay.IPv6.Prefix, Pod.Number + ns.segment_count) %}
      - gateway_address: {{ ipv6_subnet | ansible.utils.ipaddr('1') }}
{%           if Deploy.Product.NSXT.Federation.Deploy == false %}
        dhcp_ranges:
          - {{ ipv6_subnet | ansible.utils.ipaddr('-1') | ansible.utils.previous_nth_usable(2**(128-Pod.BaseOverlay.IPv6.RangePrefix)-1) }}-{{ ipv6_subnet | ansible.utils.ipaddr('last_usable') }}
        dhcp_config:
          resource_type: SegmentDhcpV6Config
          server_address: {{ ipv6_subnet | ansible.utils.ipaddr('2') }}
          lease_time: {{ Common.DHCP.LeaseTime }}
          dns_servers:
            - {{ Common.DNS.Server1.IPv6 }}
          domain_names:
            - {{ Common.DNS.Domain }}
{%           endif %}{# Deploy.Product.NSXT.Federation.Deploy == false #}
{%         endif %}{# Deploy.Setting.IPv6 #}
{%         set ns.segment_count = ns.segment_count + 1 %}
{%       else %}{# Else Segment.Subnets != None, then Subnets exist, so use them to allocate IP addresses #}
{###### Assign IP Addresses From Config File ######}
{%         for Subnet in Segment.Subnets %}
{%           if ((Deploy.Setting.IPv4 and Subnet | ansible.utils.ipv4) or (Deploy.Setting.IPv6 and Subnet | ansible.utils.ipv6)) %}
      - gateway_address: {{ Subnet }}
{%             if Deploy.Product.NSXT.Federation.Deploy == false %}
        dhcp_ranges:
          - {% if (Subnet | ansible.utils.ipv4) %}{{ Subnet | ansible.utils.ipsubnet(Pod.BaseOverlay.IPv4.RangePrefix, -1) | ansible.utils.ipaddr('range_usable') }}{% else %}{{ Subnet | ansible.utils.ipaddr('-1') | ansible.utils.previous_nth_usable(2**(128-Pod.BaseOverlay.IPv6.RangePrefix)-1) }}-{{ Subnet | ansible.utils.ipaddr('last_usable') }}{% endif %}

{# DO NOT REMOVE THE EMPTY LINE ABOVE THIS COMMENT #}
        dhcp_config:
          resource_type: {% if (Subnet | ansible.utils.ipv4) %}"SegmentDhcpV4Config"{% else %}"SegmentDhcpV6Config"{% endif %}

{# DO NOT REMOVE THE EMPTY LINE ABOVE THIS COMMENT #}
          server_address: {{ Subnet | ansible.utils.ipaddr('2') }}
          lease_time: {{ Common.DHCP.LeaseTime }}
          dns_servers:
            - {% if (Subnet | ansible.utils.ipv4) %}{{ Common.DNS.Server1.IPv4 }}{% else %}{{ Common.DNS.Server1.IPv6 }}{% endif %}

{# DO NOT REMOVE THE EMPTY LINE ABOVE THIS COMMENT #}
{%               if Subnet | ansible.utils.ipv6 %}
          domain_names:
            - {{ Common.DNS.Domain }}
{%               endif %}{# Subnet | ansible.utils.ipv6 #}
{%             endif %}{# Deploy.Product.NSXT.Federation.Deploy == false #}
{%           endif %}{# Deploy.Setting.IPv4 or Deploy.Setting.IPv6 #}
{%         endfor %}{# Subnet #}
{%       endif %}{# Segment.Subnets == None #}
{%     endif %}{# Segment.Subnets is defined #}
{%   endif %}{# OVERLAY #}
{% endfor %}{# Segment #}